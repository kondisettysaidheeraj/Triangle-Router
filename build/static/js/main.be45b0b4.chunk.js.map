{"version":3,"sources":["components/AppNav.js","components/Boot.js","components/Home.js","Navbar.js","Area.js","Triangle.js","Hypotense.js","Quiz.js","components/Inputs.js","App.js","serviceWorker.js","index.js"],"names":["AppNav","Navbar","color","dark","expand","NavbarBrand","href","Nav","className","navbar","NavItem","NavLink","Component","to","Area","useState","msg","setmsg","id","type","required","value","onClick","e","preventDefault","a1","parseInt","document","querySelector","a2","a3","s","area","Math","sqrt","class","Triangle","placeholder","Hypotense","base","height","hypotenuse","Quiz","correctAnswers","val","setVal","name","fians","count","j","ans1","getElementsByName","i","length","checked","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be45b0b4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Nav,NavItem,NavbarBrand,NavLink,Navbar} from 'reactstrap';\r\n\r\nexport default class AppNav extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand href=\"/\">Crud Application</NavbarBrand>\r\n        \r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/Details\">Details</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/Standards\">Standards</NavLink>\r\n            </NavItem>\r\n            </Nav>\r\n          \r\n        \r\n      </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport {Table,Container,Form,FormGroup, Button} from 'reactstrap'\r\nimport {Link} from 'react-router-dom'\r\nimport AppNav from './AppNav'\r\n\r\nexport default class Boot extends Component {\r\n    // emptylist={\r\n    //     name:'',\r\n    //     skill:'',\r\n    //     clg:''\r\n    // }\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             list:[],\r\n            //  item:this.emptylist,\r\n             isLoading:true\r\n        }\r\n        this.remove=this.remove.bind(this);\r\n        // this.handlesubmit=this.handlesubmit.bind(this);\r\n        // this.handlechange=this.handlechange.bind(this);\r\n    }\r\n    async componentDidMount(){\r\n        const res=await fetch('/standards');\r\n        const ans=await res.json();\r\n        console.log(ans);\r\n        this.setState({list:ans,isLoading:false})\r\n    }\r\n     async remove(id){\r\n        console.log(id);\r\n        await fetch(`/stand/${id}`,{\r\n           method:'DELETE',\r\n           headers:{\r\n               'Accept':'application/json',\r\n               'content-Type':'application/json'\r\n           }\r\n        }).then(()=>{\r\n            let a=[...this.state.list].filter(i=> i.id!==id);\r\n           //let a=this.state.list.filter(i=> i.id!==id)\r\n            this.setState({list:a});\r\n        });\r\n    }\r\n    \r\n    // handlechange(event){\r\n    //     const target=event.target;\r\n    //     const name=target.name;\r\n    //     const value=target.value;\r\n    //     let item={...this.state.item};\r\n    //     item[name]=value;\r\n    //     this.setState({item});\r\n    //     console.log(this.state);\r\n    // }\r\n    // async handlesubmit(e){\r\n    //     e.preventDefault();\r\n    //     const {item}=this.state\r\n    //     await fetch('/stud',{\r\n    //         method:(item.id)?'PUT':'POST',\r\n    //        headers:{\r\n    //            'Accept':'application/json',\r\n    //            'content-Type':'application/json'\r\n    //        },\r\n    //        body:JSON.stringify(item)\r\n    //     });\r\n\r\n        \r\n    // }\r\n    \r\n\r\n    render() {\r\n        const{list,isLoading}=this.state;\r\n        if(isLoading)\r\n        return(<div>Loading</div>);\r\n\r\n        return (\r\n            <div>\r\n                <AppNav/>\r\n                <br/>\r\n                {/* <Container>\r\n                    <Form onSubmit={this.handlesubmit}>\r\n                        <FormGroup>\r\n                            <label for=\"sname\">Name</label>\r\n                            <input type=\"text\" name=\"name\" id=\"name\" value={this.state.item.name} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"sskill\">Skill</label>\r\n                            <input type=\"text\" name=\"skill\" id=\"sskill\" value={this.state.item.skill} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"sclg\">College</label>\r\n                            <input type=\"text\" name=\"clg\" id=\"sclg\" value={this.state.item.clg} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Button color=\"primary\" type=\"submit\">Save</Button>\r\n                            <Button color=\"danger\" tag={Link} to=\"/\">Cancel</Button>\r\n                            \r\n                        </FormGroup>\r\n                    </Form>\r\n                </Container> */}\r\n\r\n                <Container>\r\n                <Button color=\"success\" tag={Link} to=\"/Details\">ADD JAVA STANDARD</Button>\r\n                <br/>\r\n                <br/>\r\n                    <h3> Java Standards List</h3>       \r\n                    \r\n                    <br/>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                            {/* <th width=\"30%\">Name</th>\r\n                            <th width=\"30%\">Skill</th>\r\n\r\n                            <th width=\"30%\">College</th> */}\r\n\r\n                                <th width=\"15%\">Name</th>\r\n                                <th width=\"15%\">Expectation</th>\r\n                                <th width=\"35%\">Description</th>\r\n                                <th width=\"10%\">Percentage_Covered</th>\r\n                                <th width=\"10%\">Percentage_Missed</th> \r\n                                </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n         \r\n                        list.map(l=>\r\n        <tr key={l.id}>\r\n        \r\n            <td>{l.name}</td>\r\n            <td>{l.expectation}</td>\r\n            <td>{l.description}</td>\r\n            <td>{l.percentage_covered}</td>\r\n            <td>{l.percentage_missed}</td>\r\n            {/* <td><Button size=\"sm\" color=\"primary\" tag={Link} to={\"/stand/\" +l.id}>Edit</Button> </td>  */}\r\n            <td><Button  size=\"sm\" color=\"danger\" onClick={()=>this.remove(l.id)}>Delete</Button></td>\r\n           \r\n        </tr>\r\n                           \r\n                        )}\r\n\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport AppNav from './AppNav'\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AppNav/>\r\n                <h1>\r\n                    Welcome to Java Standards Application\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport './App.css';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <ul>\r\n        <Link to=\"/Triangle\">\r\n          <li>is triangle ?</li>\r\n          </Link>\r\n          <Link to=\"/\">\r\n          <li>quiz </li> </Link>\r\n          <Link to=\"/Hypotense\">\r\n          <li>Hypotense </li></Link>\r\n          <Link to=\"/Area\">\r\n          <li >Area of triangle </li></Link>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\n//import { button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Area() {\r\n  const [msg, setmsg] = useState(\"\");\r\n  function check(e) {\r\n    e.preventDefault();\r\n    var a1 = parseInt(document.querySelector(\"#a1\").value);\r\n    var a2 = parseInt(document.querySelector(\"#a2\").value);\r\n    var a3 = parseInt(document.querySelector(\"#a3\").value);\r\n\r\n    var s = (a1 + a2 + a3) / 2;\r\n\r\n    var area = Math.sqrt(s * (s - a1) * (s - a2) * (s - a3));\r\n    setmsg(\"Area of a triangle using heron's formula is \" + area + \" units\");\r\n  }\r\n  return (\r\n    <div>\r\n        <Navbar/>\r\n      <form>\r\n        <h1>Area of triangle</h1>\r\n        <br />\r\n        <h3>Enter first side of a triangle </h3>\r\n        <input id=\"a1\" type=\"number\" required></input>\r\n        <br />\r\n        <br />\r\n        <h3> Enter second side of a triangle </h3>\r\n        <input id=\"a2\" type=\"number\" required></input>\r\n        <br />\r\n        <br />\r\n        <h3>Enter third side of a triangle </h3>\r\n        <input id=\"a3\" type=\"number\" required></input>\r\n        <br />\r\n        <br />\r\n        {/* <button onClick={check} type=\"button\" class=\"btn btn-primary\">\r\n          Calculate\r\n        </button> */}\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Calculate\"\r\n          onClick={check}\r\n          class=\"btn btn-primary\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <h4> {msg} </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n//export default Triangle;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\n//import { button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Triangle() {\r\n  const [msg, setmsg] = useState(\"\");\r\n  function check() {\r\n    var a1 = parseInt(document.querySelector(\"#a1\").value);\r\n    var a2 = parseInt(document.querySelector(\"#a2\").value);\r\n    var a3 = parseInt(document.querySelector(\"#a3\").value);\r\n\r\n    var ans = a1 + a2 + a3;\r\n\r\n    if (ans === 180) {\r\n      setmsg(\"Yay, the angles form a triangle!\");\r\n    } else {\r\n      setmsg(\"Oh Oh! The angle doesn't form a triangle\");\r\n    }\r\n  }\r\n  return (\r\n     \r\n    <div>\r\n         <Navbar/>\r\n      <h1>Angles of triangle</h1>\r\n      <h3>Angle1 </h3>\r\n      <input id=\"a1\" type=\"number\" placeholder=\"Enter Angle 1\"></input>\r\n      <br />\r\n      <br />\r\n      <h3>Angle2 </h3>\r\n      <input id=\"a2\" type=\"number\" placeholder=\"Enter Angle 2\"></input>\r\n      <br />\r\n      <br />\r\n      <h3>Angle3 </h3>\r\n      <input id=\"a3\" type=\"number\" placeholder=\"Enter Angle 3\"></input>\r\n      <br />\r\n      <br />\r\n      <button onClick={check} type=\"button\" class=\"btn btn-primary\">\r\n        Is Triangle?\r\n      </button>\r\n      <br />\r\n      <br />\r\n      <h4> {msg} </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\n//export default Triangle;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\n//import { button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Hypotense() {\r\n  const [msg, setmsg] = useState(\"\");\r\n  function check(e) {\r\n    e.preventDefault();\r\n    var a1 = parseInt(document.querySelector(\"#a1\").value);\r\n    var a2 = parseInt(document.querySelector(\"#a2\").value);\r\n\r\n    let base = a1 * a1;\r\n    let height = a2 * a2;\r\n    var hypotenuse = Math.sqrt(base + height);\r\n    setmsg(\"The length of hypotenuse is \" + hypotenuse);\r\n  }\r\n  return (\r\n    <div>\r\n        <Navbar/>\r\n      <form>\r\n        <h1>Calculate Hypotenuse of a triangle</h1>\r\n        <br />\r\n        <h3>Enter base value (a) = </h3>\r\n        <input id=\"a1\" type=\"number\" required></input>\r\n        <br />\r\n        <br />\r\n        <h3> Enter height value (b) =</h3>\r\n        <input id=\"a2\" type=\"number\" required></input>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        {/* <button onClick={check} type=\"button\" class=\"btn btn-primary\">\r\n          Calculate\r\n        </button> */}\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Calculate Hypotenuse\"\r\n          onClick={check}\r\n          class=\"btn btn-primary\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <b>Hypotenuse formula √(base² + height²)</b>\r\n        <br />\r\n        <br />\r\n        <h4> {msg} </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n//export default Triangle;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useState } from \"react\";\r\nexport default function Quiz() {\r\n  const correctAnswers = [\r\n    \"90°\",\r\n    \"right angled\",\r\n    \"one right angle\",\r\n    \"12, 16, 20\",\r\n    \"Equilateral triangle\",\r\n    \"100°\",\r\n    \"30°\",\r\n    \"a + b + c\",\r\n    \"no\",\r\n    \"45°\"\r\n  ];\r\n  const [val, setVal] = useState(\"-1\");\r\n  var radio = document.querySelector(\".quiz-form\");\r\n\r\n  const show = (e) => {\r\n    setVal(0);\r\n    e.preventDefault();\r\n    var count = 0;\r\n    var fians;\r\n    for (var j = 1; j <= 8; j++) {\r\n      var ans1 = document.getElementsByName(\"question\" + j);\r\n      for (var i = 0; i < ans1.length; i++) {\r\n        if (ans1[i].checked) {\r\n          fians = ans1[i].value;\r\n        }\r\n      }\r\n      if (fians === correctAnswers[j - 1]) {\r\n        count++;\r\n      }\r\n    }\r\n    setVal(count);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <Navbar/>\r\n      <h1>Quiz on triangles</h1>\r\n      <h3>For each correct answer you will get 1 point </h3>\r\n      <br />\r\n      <br />\r\n      <form class=\"quiz-form\">\r\n        <div class=\"question-container\">\r\n          <p>\r\n            What is the third angle for the triangle where angle1 = 45° and\r\n            angle2 = 45°?\r\n          </p>\r\n          <label>\r\n            <input id=\"1\" type=\"radio\" name=\"question1\" value=\"45°\" />\r\n            45°\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input id=\"1\" type=\"radio\" name=\"question1\" value=\"90°\" />\r\n            90°\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input id=\"1\" type=\"radio\" name=\"question1\" value=\"60°\" />\r\n            60°\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>\r\n            What is the third angle for the triangle where angle1 = 45° and\r\n            angle2 = 45°?\r\n          </p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question2\" value=\"obtuse\" />\r\n            obtuse\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question2\" value=\"acute\" />\r\n            acute\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question2\" value=\"right angled\" />\r\n            right angled\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>A triangle can have</p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question3\" value=\"one right angle\" />\r\n            one right angle\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question3\" value=\"two right angles\" />\r\n            two right angles\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>Which of the following can form a right angled triangle?</p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question4\" value=\"14, 15, 26\" />\r\n            14, 15, 26\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question4\" value=\"12, 16, 20\" />\r\n            12, 16, 20\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>Which of the following triangles are always similar?</p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question5\" value=\"Equilateral triangle\" />\r\n            Equilateral triangle\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question5\" value=\"Isosceles triangle\" />\r\n            Isosceles triangle\r\n          </label>\r\n          &nbsp;\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>\r\n            If one angle of a triangle is obtuse, then which one of the\r\n            following is the possible measure of remaining angles?\r\n          </p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question6\" value=\"100°\" />\r\n            100°\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question6\" value=\"85°\" />\r\n            85°\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>\r\n            If the largest angle in a triangle is 70°, what is the least\r\n            possible value of the smallest angle of the triangle?\r\n          </p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question7\" value=\"30°\" />\r\n            30°\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question7\" value=\"10°\" />\r\n            10°\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>The perimeter of scalene triangle with sides a, b, c is</p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question8\" value=\"a + b + c\" />a + b + c\r\n          </label>\r\n          <label>\r\n            &nbsp;\r\n            <input type=\"radio\" name=\"question8\" value=\"2a\" />\r\n            2a\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question8\" value=\"None of these\" />\r\n            None of these\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>A scalene triangle has ___ lines of symmetry</p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question9\" value=\"two\" />\r\n            two\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question9\" value=\"no\" />\r\n            no\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question9\" value=\"15\" />\r\n            15\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"question-container\">\r\n          <p>\r\n            There is a right triangle PQR where: angle Q = 90°; angle P = angle\r\n            R. What is the measure of angles P and R?\r\n          </p>\r\n          <label>\r\n            <input type=\"radio\" name=\"question10\" value=\"85°\" />\r\n            85°\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question10\" value=\"65°\" />\r\n            65°\r\n          </label>\r\n          &nbsp;\r\n          <label>\r\n            <input type=\"radio\" name=\"question10\" value=\"45°\" />\r\n            45°\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <input\r\n          type=\"submit\"\r\n          class=\"btn btn-primary\"\r\n          value=\"Submit Answers\"\r\n          onClick={show}\r\n        />\r\n      </form>\r\n      {val !== \"-1\" ? <h3> your score is {val} </h3> : \"\"}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport AppNav from './AppNav'\r\nimport {Table,Container,Form,FormGroup, Button} from 'reactstrap'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n\r\nexport default class Inputs extends Component {\r\n    emptylist={\r\n        name:'',\r\n        expectation:'',\r\n        description:'',\r\n        percentage_covered:'',\r\n        percentage_missed:''\r\n    }\r\n    // emptylist={\r\n    //     name:'',\r\n    //     skill:'',\r\n    //     clg:''\r\n    // }\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            \r\n            item:this.emptylist,\r\n            \r\n            \r\n        }\r\n        this.handlesubmit=this.handlesubmit.bind(this);\r\n        this.handlechange=this.handlechange.bind(this);\r\n\r\n    }\r\n    // async componentDidMount(){\r\n    //     if(this.props.match.params.id!='new'){\r\n    //         const g=await(await fetch(`/stand/$(this.props.match.params.id)`)).json();\r\n    //     this.setState({list:g})\r\n    //     }\r\n    // }\r\n    handlechange(event){\r\n        const target=event.target;\r\n        const name=target.name;\r\n        const value=target.value;\r\n        let item={...this.state.item};\r\n        item[name]=value;\r\n        this.setState({item});\r\n        console.log(this.state.item);\r\n    }\r\n    async handlesubmit(e){\r\n        e.preventDefault();\r\n        const {item}=this.state\r\n        await fetch('/stand',{\r\n            method:(item.id)?'PUT':'POST',\r\n           headers:{\r\n               'Accept':'application/json',\r\n               'content-Type':'application/json'\r\n           },\r\n           body:JSON.stringify(item)\r\n        });\r\n        \r\n        this.setState({item:this.emptylist})\r\n        // console.log(this.state);\r\n        // this.props.history.push('/stand');\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <AppNav/>\r\n                <br/>\r\n                <Container>\r\n                    <Form onSubmit={this.handlesubmit}>\r\n                    {/*\r\n                    <FormGroup>\r\n                            <label for=\"sname\">Name</label>\r\n                            <input type=\"text\" name=\"name\" id=\"name\" value={this.state.item.name} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"sskill\">Skill</label>\r\n                            <input type=\"text\" name=\"skill\" id=\"sskill\" value={this.state.item.skill} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"sclg\">College</label>\r\n                            <input type=\"text\" name=\"clg\" id=\"sclg\" value={this.state.item.clg} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Button color=\"primary\" type=\"submit\">Save</Button>\r\n                            <Button color=\"danger\" tag={Link} to=\"/Standards\">Cancel</Button>\r\n                            \r\n                        </FormGroup> */}\r\n                        <FormGroup>\r\n                            <label for=\"sname\">Name</label>\r\n                            <input type=\"text\" name=\"name\" id=\"name\" value={this.state.item.name} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"expectation\">Expectation</label>\r\n                            <input type=\"text\" name=\"expectation\" id=\"expectation\" value={this.state.item.expectation} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"description\">Description</label>\r\n                            <input type=\"text\" name=\"description\"  width= \"100\" id=\"description\" value={this.state.item.description} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"percentage_covered\">Percentage_Covered</label>\r\n                            <input type=\"text\" name=\"percentage_covered\" id=\"percentage_covered\" value={this.state.item.percentage_covered} onChange={this.handlechange}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <label for=\"percentage_missed\">Percentage_Missed</label>\r\n                            <input type=\"text\" name=\"percentage_missed\" id=\"percentage_missed\" value={this.state.item.percentage_missed} onChange={this.handlechange}/>\r\n                        </FormGroup> \r\n                        <FormGroup>\r\n                            <Button color=\"primary\" type=\"submit\" >Save</Button>\r\n                            <Button color=\"danger\" tag={Link} to=\"/Standards\">Cancel</Button>\r\n                            \r\n                        </FormGroup>\r\n                    </Form>\r\n                </Container>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Boot from './components/Boot'\nimport Home from './components/Home'\nimport { Area } from \"./Area\";\nimport { Triangle } from \"./Triangle\";\nimport { Hypotense } from \"./Hypotense\";\nimport Quiz from \"./Quiz\";\nimport Navbar from \"./Navbar\";\n\nimport Inputs from './components/Inputs'\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n    \n  <div className=\"App\">\n  \n    <Switch>\n      \n      {/* <Route path=\"/\" exact={true} component={Home}/>\n      <Route path=\"/Details\" exact={true} component={Inputs}/>\n      <Route path=\"/Standards\" exact={true} component={Boot}/> */}\n\n      \n      <Route path=\"/Area\" exact={true} component={Area}/>\n      <Route path=\"/Hypotense\" exact={true} component={Hypotense}/>\n      <Route path=\"/Triangle\" exact={true} component={Triangle}/>\n      <Route path=\"/\" exact={true} component={Quiz}/>\n      \n      \n      {/* <Boot/> */}\n      </Switch>\n       \n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}